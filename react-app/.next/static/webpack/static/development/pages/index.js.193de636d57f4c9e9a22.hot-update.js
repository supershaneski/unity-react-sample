webpackHotUpdate("static/development/pages/index.js",{

/***/ "./components/UnityLoader.js":
/*!***********************************!*\
  !*** ./components/UnityLoader.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony default export */ __webpack_exports__[\"default\"] = (function (containerElement) {\n  //console.log(containerElement.offsetWidth, containerElement.offsetHeight);\n  (function (window) {\n    'use strict';\n\n    function unityPlugin() {\n      var tdx = {};\n      var MAX_INDEX = 100000;\n      var retval = Array(MAX_INDEX + 1).fill();\n      var retindex = 0;\n\n      function getRetIndex() {\n        return retindex >= MAX_INDEX ? 0 : retindex++;\n      }\n\n      function getRetValue(index) {\n        var value = retval[index];\n        delete retval[index];\n        return value;\n      }\n\n      function sendMessage(func_name, param) {\n        if (typeof gameInstance === \"undefined\") {\n          console.log(\"Error : \" + func_name);\n          return;\n        }\n\n        console.log(\"Send Message : \" + func_name);\n        gameInstance.SendMessage(\"SceneManager\", func_name, param);\n        return true;\n      }\n\n      function makeParam() {\n        var param = {\n          index: arguments[0],\n          args: null\n        };\n\n        if (arguments.length > 1 && arguments[1] !== null) {\n          param.args = arguments[1];\n        }\n\n        return JSON.stringify(param);\n      } // Utility\n\n\n      tdx.SetRetValue = function (index, value) {\n        retval[index] = value;\n      }; // Events\n\n\n      tdx.OnLoad = function (callback) {\n        return callback;\n      };\n\n      tdx._OnLoad = function () {\n        this.OnLoad();\n      };\n\n      tdx.OnRotationPlay = function (callback) {\n        return callback;\n      };\n\n      tdx._OnRotationPlay = function () {\n        this.OnRotationPlay();\n      };\n\n      tdx.OnRotationStop = function (callback) {\n        return callback;\n      };\n\n      tdx._OnRotationStop = function () {\n        this.OnRotationStop();\n      };\n\n      tdx.OnChangeColor = function (callback) {\n        return callback;\n      };\n\n      tdx._OnChangeColor = function (attr) {\n        this.OnChangeColor(attr);\n      }; // Methods\n\n\n      tdx.GetTankProperty = function () {\n        var index = getRetIndex();\n        var propName = arguments[0];\n        sendMessage(\"GetTankProperty\", makeParam(index, propName));\n        return getRetValue(index);\n      };\n\n      tdx.GetTankColor = function () {\n        var index = getRetIndex();\n        sendMessage(\"GetTankColor\", makeParam(index));\n        return getRetValue(index);\n      };\n\n      tdx.SetTankColor = function () {\n        var color = arguments[0];\n        sendMessage(\"SetTankColor\", makeParam(-1, color));\n      };\n\n      tdx.GetTitle = function () {\n        var index = getRetIndex();\n        sendMessage(\"GetTitle\", makeParam(index));\n        return getRetValue(index);\n      };\n\n      tdx.SetTitle = function () {\n        var title = arguments[0];\n        sendMessage(\"SetTitle\", makeParam(-1, title));\n      };\n\n      tdx.GetRank = function () {\n        var index = getRetIndex();\n        sendMessage(\"GetRank\", makeParam(index));\n        return getRetValue(index);\n      };\n\n      tdx.SetRank = function () {\n        var rank = arguments[0];\n        sendMessage(\"SetRank\", makeParam(-1, rank));\n      };\n\n      tdx.GetPower = function () {\n        var index = getRetIndex();\n        sendMessage(\"GetPower\", makeParam(index));\n        return getRetValue(index);\n      };\n\n      tdx.SetPower = function () {\n        var power = arguments[0];\n        sendMessage(\"SetPower\", makeParam(-1, power));\n      };\n\n      tdx.GetArmor = function () {\n        var index = getRetIndex();\n        sendMessage(\"GetArmor\", makeParam(index));\n        return getRetValue(index);\n      };\n\n      tdx.SetArmor = function () {\n        var armor = arguments[0];\n        sendMessage(\"SetArmor\", makeParam(-1, armor));\n      };\n\n      tdx.GetSpeed = function () {\n        var index = getRetIndex();\n        sendMessage(\"GetSpeed\", makeParam(index));\n        return getRetValue(index);\n      };\n\n      tdx.SetSpeed = function () {\n        var speed = arguments[0];\n        sendMessage(\"SetSpeed\", makeParam(-1, speed));\n      };\n\n      tdx.Play = function () {\n        sendMessage(\"Play\", makeParam(-1, arguments));\n      };\n\n      tdx.Stop = function () {\n        sendMessage(\"Stop\", makeParam(-1, arguments));\n      };\n\n      Object.defineProperty(tdx.SetRetValue, \"name\", {\n        value: \"SetRetValue\"\n      });\n      return tdx;\n    }\n\n    if (typeof window.InterJSPlugin === 'undefined') {\n      window.InterJSPlugin = unityPlugin();\n    }\n  })(window);\n\n  var gameInstance = UnityLoader.instantiate(\"unity-container\", \"/data/Build.json\");\n\n  function getPluginContext() {\n    return window.InterJSPlugin;\n  }\n\n  return {\n    getPluginContext: getPluginContext\n  };\n});\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/UnityLoader.js\n");

/***/ })

})